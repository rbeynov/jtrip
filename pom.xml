<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--
        Maven is a build automation & lifecycle managment tool.
        It aims for handling how the project should be built according to conventions.
        It's using a descriptive file (pom.xml) allowing us to share a same configuration across all the developers.
        It's a really powerful tool with many plugins and usages but as it's out of the lesson's scope,
        we won't talk that much about it. Just take this as an "introduction".
        Here we are just using the pom.xml to declare a new project belonging to domain com.ynov.
        There is no external libraries (dependencies) used for this project.
        As Maven would download the required dependencies for us, we won't have to worry about "do you have all the jars you need ?"
        "are you using the right version of Hibernate ?"...
        Maven is really unavoidable in companies so I strongly suggest you to check some resources about it.
    -->

    <!--
        Group in which our application is taking place.
        Most of the time, it's the application package.
        For example, Spring has a lot of project belonging to the same groupId "org.springframework".
        Let's have a look at http://mvnrepository.com/artifact/org.springframework to check all the artifacts.
    -->
    <groupId>com.ynov</groupId>

    <!-- ArtifactId is the name of our application. -->
    <artifactId>jtrip</artifactId>

    <!--
        Version is the current version of our application.
        Here adding "SNAPSHOT" is just to specify that we are on the version 1.0 but it's not
        the final build for this version (we are still working on it).
    -->
    <version>1.0-SNAPSHOT</version>

    <!--
        Packaging type of your application.
        Here we are working on a console application, so the package is a JAR.
        A web application would had been packaged as WAR or EAR for example.
    -->
    <packaging>jar</packaging>


    <!--
        Not mandatory informations.
        Mostly description or SCM (Source Control Management) repo information for example.
    -->
    <name>JTrip YNOV</name>
    <description>Simple JAVA project provided as an exercice for YNOV JAVA lesson.</description>

    <!--
        Define some properties.
        May be used to declare the versions of all the dependencies as a good practice.
        For example, to use the same version of Spring for all the components,
        we would declare a spring.version properties and use it like a variable
        with ${spring.version} in the dependencies block.
    -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!--
        List of all the dependencies needed by the application (frameworks, other projects etc...).
        All those dependencies will be downloaded as JARs from an "artifact repository" listing
        many maven projects and JAR from different versions.
    -->
    <dependencies>

        <!-- Driver JDBC MySQL -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>6.0.5</version>
        </dependency>

    </dependencies>

    <!-- Informations about "how maven should build this project". -->
    <build>
        <plugins>
            <!-- ________ Compilation ________ -->
            <!--
                Let's using the maven-compiler-plugin targeting the version 7 of JAVA.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>